<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/cache 
        http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- 第一步：引入外部数据库配置文件 -->
	<context:property-placeholder location="classpath:mysql.properties" />

	<!-- 第二步：开启spring容器的自动扫描功能,并且排除WEB层的组件 -->
	<context:component-scan base-package="org.framestudy.ssh">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	
	<!-- 如果我们需要使用二级缓存技术，才需要配置以下代码 -->
	<cache:annotation-driven />
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		p:cache-manager-ref="ehcache" />

	<bean id="ehcache"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		p:config-location="classpath:ehcache.xml" />

	<!-- 第三步：配置数据源连接池 -->
	<!-- druid 官方文档位置：https://github.com/alibaba/druid/ -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.userName}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 最大连接池数量 -->
		<property name="maxActive" value="20" />
		<!-- 初始化时建立物理连接的个数 -->
		<property name="initialSize" value="5" />
		<!-- 获取连接时最大等待时间,单位是：毫秒 -->
		<property name="maxWait" value="60000" />
		<!-- 最小连接池数量 -->
		<property name="minIdle" value="5" />
		<!-- 有两个含义： 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。 
			2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 连接保持空闲而不被驱逐的最小时间，单位：毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。应用程序从连接池中，申请连接的时候检测， 如果空闲时间大于timeBetweenEvictionRunsMillis， 
			执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 应用程序从连接池中，申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnReturn" value="false" />
		<!-- 是否缓存preparedStatement， 也就是PSCache。PSCache对支持游标的数据库性能提升巨大， 比如说oracle。在mysql下建议关闭。 -->
		<property name="poolPreparedStatements" value="true" />
		<!-- 缓存的preparedStatement的个数 -->
		<property name="maxOpenPreparedStatements" value="20" />
		<!-- 默认采用异步连接方式 -->
		<property name="asyncInit" value="true" />
		<!-- 配置校验语句 -->
		<property name="validationQuery" value="select now() from dual"></property>

		<!-- 属性类型是字符串，通过别名的方式配置扩展插件， 常用的插件有： 监控统计用的filter:stat 日志用的filter:log4j 
			防御sql注入的filter:wall -->
		<property name="filters" value="wall,stat" />

		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="log-filter" />
			</list>
		</property>

	</bean>

	<!-- 慢SQL记录 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- 慢sql时间设置,即执行时间大于200毫秒的都是慢sql -->
		<property name="slowSqlMillis" value="200" />
		<property name="logSlowSql" value="true" />
	</bean>

	<!-- log4j来作为慢查询日志记录框架 -->
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="dataSourceLogEnabled" value="true" />
		<property name="statementExecutableSqlLogEnable" value="true" />
	</bean>


	<!-- 第四步，配置SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 开启自动扫描功能，扫描使用了JPA规范（注解）完成ORM映射关系的实例类 -->
		<property name="packagesToScan">
			<list>
				<value>org.framestudy.ssh.bean</value>
				<value>org.framestudy.ssh.extendmag</value>
				<value>org.framestudy.ssh.m2mmag</value>
				<value>org.framestudy.ssh.o2mmag</value>
				<value>org.framestudy.ssh.o2omag</value>
			</list>
		</property>
		<!-- 开启自动扫描功能，扫描完成ORM映射关系的xml文件 <property name="mappingResources"> <list> 
			<value>org/framestudy/sh/xmls/UserBean.hbm.xml</value> </list> </property> -->

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>

				<prop key="hibernate.generate_statistics">true</prop>
				<!-- session关闭时，连接自动释放 -->
				<prop key="hibernate.connection.release_mode">auto</prop>
				<!-- 当数据库将长时间没有访问的连接自动断开之后， hibernate框架会自动重新建立连接 -->
				<prop key="hibernate.autoReconnect">true</prop>
			</props>
		</property>
	</bean>

	<!-- 第五步，配置spring容器针对hibernate框架，封装的模板类 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 第六步，配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 第七步，配置spring事务管理手段 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" read-only="true" />
			<tx:method name="save*" read-only="false" rollback-for="java.lang.Exception"
				propagation="REQUIRED" />
			<tx:method name="insert*" read-only="false" rollback-for="java.lang.Exception"
				propagation="REQUIRED" />
			<tx:method name="update*" read-only="false" rollback-for="java.lang.Exception"
				propagation="REQUIRED" />
			<tx:method name="delete*" read-only="false" rollback-for="java.lang.Exception"
				propagation="REQUIRED" />
			<tx:method name="remove" read-only="false" rollback-for="java.lang.Exception"
				propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="list*" read-only="true" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="txPointcut"
			expression="execution(* org.framestudy.ssh.*mag.service.impl.*ServiceImpl.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>

	<!-- 第八步：开启切面的动态代理支持 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
</beans>
